const express = require("express");
const router = express.Router();
const Question = require("../models/ques_Schema");
var cloudinary = require("cloudinary").v2;
cloudinary.config({
  cloud_name: "dmcbeyvr4",
  api_key: "641921374166998",
  api_secret: "q4zM2BjtuVSux3hKkXpG_SqqcnY",
  secure: true,
});
//Get All questions
router.get("/", async (req, res) => {
  try {
    const questions = await Question.find().sort({ createdAt: -1 }).limit(10);
    res.setHeader("Content-Type", "application/json");
    res.send(questions);
  } catch (err) {
    res.status(500).send({ message: err.message });
  }
});
//get my questions
router.get("/my/:id", async (req, res) => {
  try {
    const questions = await Question.find({ userId: req.params.id }).sort({
      createdAt: -1,
    });
    res.setHeader("Content-Type", "application/json");
    res.send(questions);
  } catch (err) {
    res.status(500).send({ message: err.message });
  }
});
//Get question by ID
router.get("/:id", async (req, res) => {
  try {
    const questions = await Question.findById(req.params.id);
    res.setHeader("Content-Type", "application/json");
    res.send(questions);
  } catch (err) {
    res.status(500).send({ message: err.message });
  }
});

//Create One Question
router.post("/", async (req, res) => {
  try {
    if (req.body.imageadded === "true") {
      var filepic = req.files.picture;
      var filename = `${Date.now()}_${filepic.name}`;
      console.log(filename);
      await filepic.mv(`uploaded_imgs/ques/${filename}`);
      await cloudinary.uploader.upload(
        `uploaded_imgs/ques/${filename}`,
        {
          public_id: `iitgstackoverflow/questions/${filename}`,
          tags: "basic_sample",
        },
        function (err, image) {
          console.log("** File Upload");
          if (err) {
            console.warn(err);
          }
          console.log(
            "* public_id for the uploaded image is generated by Cloudinary's service."
          );
          console.log("* " + image.url);
          const doc = Question.create({
            name: req.body.name,
            userId: req.body.userId,
            rollno: req.body.rollno,
            emailid: req.body.emailid,
            question_title: req.body.question_title,
            question: req.body.question,
            picture: image.url,
            keywordarray: req.body.keywordarray.split(","),
            date: new Intl.DateTimeFormat("en-US", {
              year: "numeric",
              month: "2-digit",
              day: "2-digit",
              hour: "2-digit",
              minute: "2-digit",
            }).format(Date.now()),
          });
          res.setHeader("Content-Type", "application/json");
          res.send(doc);
        }
      );
    } else {
      const doc = Question.create({
        name: req.body.name,
        userId: req.body.userId,
        rollno: req.body.rollno,
        emailid: req.body.emailid,
        question_title: req.body.question_title,
        question: req.body.question,
        picture: "",
        keywordarray: req.body.keywordarray.split(","),
        date: new Intl.DateTimeFormat("en-US", {
          year: "numeric",
          month: "2-digit",
          day: "2-digit",
          hour: "2-digit",
          minute: "2-digit",
        }).format(Date.now()),
      });
      res.setHeader("Content-Type", "application/json");
      res.send(doc);
    }
  } catch (err) {
    res.status(400).send({ message: err.message });
  }
});
//update question
router.put("/:quesid/", async (req, res) => {
  try {
    if (req.body.imageadded === "true") {
      var filepic = req.files.picture;
      var filename = `${Date.now()}_${filepic.name}`;
      console.log(filename);
      await filepic.mv(`uploaded_imgs/ques/${filename}`);
      await cloudinary.uploader.upload(
        `uploaded_imgs/ques/${filename}`,
        {
          public_id: `iitgstackoverflow/questions/${filename}`,
          tags: "basic_sample",
        },
        function (err, image) {
          console.log("** File Upload");
          if (err) {
            console.warn(err);
          }
          console.log(
            "* public_id for the uploaded image is generated by Cloudinary's service."
          );
          console.log("* " + image.url);
          const doc = Question.findById(req.params.quesid)
            .then((question) => {
              if (question != null) {
                question.question = req.body.question;
                question.question_title = req.body.question_title;
                question.picture = image.url;
                question.save().then(
                  (question) => {
                    res.statusCode = 200;
                    res.setHeader("Content-Type", "application/json");
                    res.send(question);
                  },
                  (err) => res.status(400).send({ message: err.message })
                );
              } else {
                err = new Error("Question " + req.params.quesid + " not found");
                res.status(400).send({ message: err.message });
              }
            })
            .catch((err) => res.status(400).send({ message: err.message }));
        }
      );
    } else {
      const doc = Question.findById(req.params.quesid)
        .then((question) => {
          if (question != null) {
            question.question = req.body.question;
            question.question_title = req.body.question_title;
            question.save().then(
              (question) => {
                res.statusCode = 200;
                res.setHeader("Content-Type", "application/json");
                res.send(question);
              },
              (err) => res.status(400).send({ message: err.message })
            );
          } else {
            err = new Error("Question " + req.params.quesid + " not found");
            res.status(400).send({ message: err.message });
          }
        })
        .catch((err) => res.status(400).send({ message: err.message }));
    }
  } catch (err) {
    res.status(400).send({ message: err.message });
  }
});
//delete question
router.delete("/:quesid/", async (req, res) => {
  try {
    const doc = Question.findByIdAndDelete(req.params.quesid, function (err) {
      if (err)  res.status(400).send({ message: err.message });
      res.send("success");
  }); 
}
catch (err) {
    res.status(400).send({ message: err.message });
  }
});
//Get All answers of particular question
router.get("/answer/:quesid/", async (req, res) => {
  try {
    const question = Question.findById(req.params.quesid)
      .then((question) => {
        if (question != null) {
          res.setHeader("Content-Type", "application/json");
          res.send(question.answer);
        } else {
          err = new Error("Question " + req.body.questionID + " not found");
          res.status(400).send({ message: err.message });
        }
      })
      .catch((err) => res.status(400).send({ message: err.message }));
    res.setHeader("Content-Type", "application/json");
  } catch (err) {
    res.status(400).send({ message: err.message });
  }
});
//Add answer to a question
router.post("/answer/", async (req, res) => {
  try {
    if (req.body.imageadded === "true") {
      var filepic = req.files.picture;
      var filename = `${Date.now()}_${filepic.name}`;
      console.log(filename);
      await filepic.mv(`uploaded_imgs/ans/${filename}`);
      await cloudinary.uploader.upload(
        `uploaded_imgs/ans/${filename}`,
        {
          public_id: `iitgstackoverflow/answers/${filename}`,
          tags: "basic_sample",
        },
        function (err, image) {
          console.log("** File Upload");
          if (err) {
            console.warn(err);
          }
          console.log(
            "* public_id for the uploaded image is generated by Cloudinary's service."
          );
          console.log("* " + image.url);
          const doc = Question.findById(req.body.questionID)
            .then((question) => {
              if (question != null) {
                question.answer.push({
                  name: req.body.name,
                  userId: req.body.userId,
                  rollno: req.body.rollno,
                  rating: 0,
                  emailid: req.body.emailid,
                  answer: req.body.answer,
                  picture: image.url,
                  date: new Intl.DateTimeFormat("en-US", {
                    year: "numeric",
                    month: "2-digit",
                    day: "2-digit",
                    hour: "2-digit",
                    minute: "2-digit",
                  }).format(Date.now()),
                });
                question.save().then(
                  (question) => {
                    res.statusCode = 200;
                    res.setHeader("Content-Type", "application/json");
                    res.send(question);
                  },
                  (err) => res.status(400).send({ message: err.message })
                );
              } else {
                err = new Error(
                  "Question " + req.body.questionID + " not found"
                );

                res.status(400).send({ message: err.message });
              }
            })
            .catch((err) => res.status(400).send({ message: err.message }));
        }
      );
    } else {
      const doc = Question.findById(req.body.questionID)
        .then((question) => {
          if (question != null) {
            question.answer.push({
              name: req.body.name,
              userId: req.body.userId,
              rollno: req.body.rollno,
              rating: 0,
              emailid: req.body.emailid,
              answer: req.body.answer,
              picture: "",
              date: new Intl.DateTimeFormat("en-US", {
                year: "numeric",
                month: "2-digit",
                day: "2-digit",
                hour: "2-digit",
                minute: "2-digit",
              }).format(Date.now()),
            });
            question.save().then(
              (question) => {
                res.statusCode = 200;
                res.setHeader("Content-Type", "application/json");
                res.send(question);
              },
              (err) => res.status(400).send({ message: err.message })
            );
          } else {
            err = new Error("Question " + req.body.questionID + " not found");
            res.status(400).send({ message: err.message });
          }
        })
        .catch((err) => res.status(400).send({ message: err.message }));
    }
  } catch (err) {
    res.status(400).send({ message: err.message });
  }
});
//update ans in a question
router.put("/answer/:quesid/:ansid", async (req, res) => {
  try {
    if (req.body.imageadded === "true") {
      var filepic = req.files.picture;
      var filename = `${Date.now()}_${filepic.name}`;
      console.log(filename);
      await filepic.mv(`uploaded_imgs/ans/${filename}`);
      await cloudinary.uploader.upload(
        `uploaded_imgs/ans/${filename}`,
        {
          public_id: `iitgstackoverflow/answers/${filename}`,
          tags: "basic_sample",
        },
        function (err, image) {
          console.log("** File Upload");
          if (err) {
            console.warn(err);
          }
          console.log(
            "* public_id for the uploaded image is generated by Cloudinary's service."
          );
          console.log("* " + image.url);
          const doc = Question.findById(req.params.quesid)
            .then((question) => {
              if (question != null) {
                question.answer.id(req.params.ansid).answer = req.body.answer;
                question.answer.id(req.params.ansid).picture = image.url;
                question.save().then(
                  (question) => {
                    res.statusCode = 200;
                    res.setHeader("Content-Type", "application/json");
                    res.send(question);
                  },
                  (err) => res.status(400).send({ message: err.message })
                );
              } else {
                err = new Error("Question " + req.params.quesid + " not found");
                res.status(400).send({ message: err.message });
              }
            })
            .catch((err) => res.status(400).send({ message: err.message }));
        }
      );
    } else {
      const doc = Question.findById(req.params.quesid)
        .then((question) => {
          if (question != null) {
            question.answer.id(req.params.ansid).answer = req.body.answer;
            question.save().then(
              (question) => {
                res.statusCode = 200;
                res.setHeader("Content-Type", "application/json");
                res.send(question);
              },
              (err) => res.status(400).send({ message: err.message })
            );
          } else {
            err = new Error("Question " + req.params.quesid + " not found");
            res.status(400).send({ message: err.message });
          }
        })
        .catch((err) => res.status(400).send({ message: err.message }));
    }
  } catch (err) {
    res.status(400).send({ message: err.message });
  }
});
//delete answer to a question
router.delete("/answer/:quesid/:ansid", async (req, res) => {
  try {
    const doc = Question.findById(req.params.quesid).then((question) => {
      if (question != null) {
        question.answer.id(req.params.ansid).remove();
        question.save().then(
          (question) => {
            res.statusCode = 200;
            res.setHeader("Content-Type", "application/json");
            res.send(question);
          },
          (err) => res.status(400).send({ message: err.message })
        );
      } else {
        err = new Error("Question " + req.body.questionID + " not found");
        res.status(400).send({ message: err.message });
      }
    });
    res.setHeader("Content-Type", "application/json");
  } catch (err) {
    res.status(400).send({ message: err.message });
  }
});

module.exports = router;
